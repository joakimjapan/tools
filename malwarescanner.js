const express = require('express');
const multer = require('multer');
const crypto = require('crypto');
const axios = require('axios');
const AWS = require('aws-sdk');
const fs = require('fs');
const path = require('path');

const app = express();
const upload = multer({ dest: 'uploads/' });

const s3 = new AWS.S3({
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    region: process.env.AWS_REGION
});

const vtApiKey = process.env.VIRUSTOTAL_API_KEY;

app.post('/upload', upload.single('file'), async (req, res) => {
    const file = req.file;

    // Calculate file hash (SHA-256)
    const fileBuffer = fs.readFileSync(file.path);
    const hash = crypto.createHash('sha256').update(fileBuffer).digest('hex');

    try {
        // Scan the file with VirusTotal
        const vtResponse = await axios.get(`https://www.virustotal.com/vtapi/v2/file/report`, {
            params: {
                apikey: vtApiKey,
                resource: hash
            }
        });

        const isMalicious = vtResponse.data.positives > 0;

        let s3Key = '';

        if (isMalicious) {
            // Save to "quarantined" folder
            s3Key = `quarantined/${file.filename}`;
        } else {
            // Save to main bucket
            s3Key = `uploads/${file.filename}`;
        }

        // Upload to S3
        await s3.upload({
            Bucket: process.env.S3_BUCKET_NAME,
            Key: s3Key,
            Body: fileBuffer,
            ContentType: file.mimetype
        }).promise();

        // Remove the local file
        fs.unlinkSync(file.path);

        res.json({ message: isMalicious ? 'File is malicious and quarantined.' : 'File uploaded successfully.' });
    } catch (error) {
        console.error('Error uploading file:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
